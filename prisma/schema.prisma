generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @unique @default(uuid())
  email              String               @unique @db.VarChar(255)
  password           String?              @db.VarChar(255)
  createdAt          DateTime             @default(now())
  name               String?              @db.VarChar(255)
  photoURL           String?              @db.VarChar(255)
  country            String?              @db.VarChar(100)
  phoneNumber        String?              @db.VarChar(100)
  role               Role
  updatedAt          DateTime             @updatedAt
  status             Status               @default(pending)
  admin              Admin?
  creator            Creator?
  finance            Finance?
  Event              Event?               @relation(fields: [eventId], references: [id])
  eventId            String?
  Pitch              Pitch[]
  ShortListedCreator ShortListedCreator[]
  // FilterPitch        FilterPitch[]
  threads     Thread[] @relation("UserThreads")
  UserThread  UserThread[]
  sentMessages Message[] @relation("UserMessages")
  
}

model Admin {
  id                    String                  @id @unique @default(cuid())
  designation           Designation
  mode                  Mode                    @default(normal)
  inviteToken           String?                 @unique
  userId                String                  @unique
  // campaign              Campaign[]
  user                  User                    @relation(fields: [userId], references: [id])
  AdminPermissionModule AdminPermissionModule[]
  CampaignAdmin         CampaignAdmin[]
}

enum Designation {
  Finance
  CSM
  BD
  Growth
}

model Creator {
  id          String      @id @unique @default(cuid())
  pronounce   String?     @db.VarChar(100)
  nationality String?     @db.VarChar(100)
  location    String?     @db.VarChar(100)
  birthDate   DateTime?
  instagram   String?     @db.VarChar(100)
  tiktok      String?     @db.VarChar(100)
  employment  Employment? @default(others)
  languages   Json?
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
  industries  Industry[]
  interests   Interest[]
  MediaKit    MediaKit?
}

model MediaKit {
  id        String   @id @unique @default(cuid())
  photoUrl  String?
  name      String?
  about     String?
  interests String[]
  creatorId String   @unique
  creator   Creator  @relation(fields: [creatorId], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  threadId    Int?
  thread      Thread?   @relation(fields: [threadId], references: [id])
  senderId    String?
  sender      User?     @relation(fields: [senderId], references: [id], name: "UserMessages")
}

model Thread {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  users        User[]    @relation("UserThreads")
  UserThread   UserThread[]
  messages     Message[]
  archived     Boolean   @default(false)
}

model UserThread {
  userId   String
  threadId Int
  user     User     @relation(fields: [userId], references: [id])
  thread   Thread   @relation(fields: [threadId], references: [id])
  @@id([userId, threadId])
}

model Industry {
  id      String  @id @unique @default(cuid())
  name    String?
  rank    Int?
  userId  String
  creator Creator @relation(fields: [userId], references: [userId])
}

model Interest {
  id      String  @id @unique @default(cuid())
  name    String?
  rank    Int?
  userId  String
  creator Creator @relation(fields: [userId], references: [userId])
}

model Finance {
  id     String @id @unique @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Event {
  id          String   @id @unique @default(cuid())
  title       String
  description String
  color       String
  allDay      Boolean
  userId      String
  start       DateTime
  end         DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User[]
}

model session {
  sid    String   @id @unique @default(cuid())
  sess   Json
  expire DateTime
}

// resgration number
model Company {
  id                  String     @id @unique @default(cuid())
  name                String     @db.VarChar(100)
  email               String?    @db.VarChar(255)
  phone               String?    @db.VarChar(255)
  website             String?    @db.VarChar(255)
  address             String     @db.VarChar(255)
  logo                String?    @db.VarChar(100)
  about               String?    @db.VarChar(255)
  objectives          Json?
  registration_number String     @unique
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  brand               Brand[]
  // campaign            Campaign[]
  Campaign            Campaign[]
}

// resgration number
model Brand {
  id           String     @id @unique @default(cuid())
  name         String     @db.VarChar(100)
  email        String?    @db.VarChar(255)
  phone        String?    @db.VarChar(255)
  website      String?    @db.VarChar(255)
  logo         String?    @db.VarChar(255)
  description  String?    @db.VarChar(255)
  service_name String?    @db.VarChar(255)
  instagram    String?    @db.VarChar(255)
  tiktok       String?    @db.VarChar(255)
  facebook     String?    @db.VarChar(255)
  objectives   Json?
  supBrand     SupBrand[]
  industries   Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Campaign     Campaign[]
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])
}

model SupBrand {
  id                  String        @id @unique @default(cuid())
  name                String        @db.VarChar(255)
  email               String?       @db.VarChar(255)
  phone               String?       @db.VarChar(255)
  tiktok              String?       @db.VarChar(255)
  instagram           String?       @db.VarChar(255)
  website             String?       @db.VarChar(255)
  logo                String?       @db.VarChar(255)
  registration_number String        @unique
  description         String?       @db.VarChar(255)
  service_name        String?       @db.VarChar(255)
  facebook            String?       @db.VarChar(255)
  intersets           Json?
  industries          Json?
  objectives          Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  brandId             String
  brand               Brand         @relation(fields: [brandId], references: [id])
  supSupBrand         SupSupBrand[]
}

model SupSupBrand {
  id                  String   @id @unique @default(cuid())
  name                String   @db.VarChar(255)
  email               String?  @db.VarChar(255)
  phone               String?  @db.VarChar(255)
  tiktok              String?  @db.VarChar(255)
  instagram           String?  @db.VarChar(255)
  facebook            String?  @db.VarChar(255)
  website             String?  @db.VarChar(255)
  service_name        String?  @db.VarChar(255)
  registration_number String   @unique
  logo                String?  @db.VarChar(255)
  description         String?  @db.VarChar(255)
  objectives          Json?
  intersets           Json?
  industries          Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  supBrandId          String
  supBrand            SupBrand @relation(fields: [supBrandId], references: [id])
}

//campaign peroid and intervals
model Campaign {
  id                      String                    @id @unique @default(cuid())
  name                    String
  description             String
  status                  CampaignStatus            @default(past)
  stage                   Stage                     @default(draft)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  brand                   Brand?                    @relation(fields: [brandId], references: [id])
  brandId                 String?
  company                 Company?                  @relation(fields: [companyId], references: [id])
  companyId               String?
  campaignBrief           CampaignBrief?
  campaignRequirement     CampaignRequirement?
  defaultCampaignTimeline DefaultTimelineCampaign[]
  // campaignTimeline   CustomTimelineCampaign?   @relation(fields: [customTimelineCampaignId], references: [id])
  // customTimelineCampaignId String?
  campaignTimeline        CampaignTimeline[]
  CampaignAdmin           CampaignAdmin[]
  Pitch                   Pitch[]
  ShortListedCreator      ShortListedCreator[]
}

model CampaignAdmin {
  adminId    String
  campaignId String
  admin      Admin    @relation(fields: [adminId], references: [userId])
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@id([adminId, campaignId])
  @@index([adminId])
  @@index([campaignId])
}

model CampaignRequirement {
  id              String   @id @unique @default(cuid())
  gender          String[]
  age             String[]
  geoLocation     String[]
  language        String[]
  creator_persona String[]
  user_persona    String   @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  campaignId      String   @unique
  campaign        Campaign @relation(fields: [campaignId], references: [id])
}

model CampaignBrief {
  id             String   @id @unique @default(cuid())
  title          String   @db.VarChar(255)
  objectives     String?  @db.VarChar(255)
  images         Json?
  agreementFrom  String   @db.VarChar(255)
  startDate      DateTime
  endDate        DateTime
  interests      Json?
  industries     Json?
  success        String?  @db.VarChar(255)
  campaigns_do   Json?
  campaigns_dont Json?
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  campaignId     String   @unique
  campaign       Campaign @relation(fields: [campaignId], references: [id])
}

model Permission {
  id                    String                  @id @unique @default(cuid())
  name                  Permissions
  description           String?
  AdminPermissionModule AdminPermissionModule[]
}

model Module {
  id                    String                  @id @unique @default(cuid())
  name                  Modules
  description           String?
  AdminPermissionModule AdminPermissionModule[]
}

model AdminPermissionModule {
  id           String     @id @unique @default(cuid())
  adminId      String
  moduleId     String
  permissionId String
  admin        Admin      @relation(fields: [adminId], references: [id])
  module       Module     @relation(fields: [moduleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

enum Permissions {
  create
  read
  update
  delete
}

enum Modules {
  creator
  campaign
  brand
  metric
  invoice
}

enum Resources {
  creator
  brand
  campaign
}

enum Mode {
  god
  normal
}

enum Status {
  active
  pending
  banned
  rejected
}

enum CampaignStatus {
  active
  past
  close
}

enum Role {
  admin
  creator
  brand
  superadmin
}

enum Stage {
  publish
  draft
}

enum Employment {
  fulltime
  freelance
  part_time
  student
  in_between
  unemployed
  others
}

model DefaultTimelineCampaign {
  id            String     @id @unique @default(cuid())
  timeline_type String
  days          String
  for           String
  Campaign      Campaign[]
}

// model CustomTimelineCampaign {
//   id                 String     @id @unique @default(cuid())
//   openForPitch       Int
//   shortlistCreator   Int
//   firstDraft         Int
//   finalDraft         Int
//   feedBackFirstDraft Int
//   feedBackFinalDraft Int
//   filterPitch        Int
//   agreementSign      Int
//   qc                 Int
//   posting            Int
//   Campaign           Campaign[]
// }

// model CampaignTimeline {
//   id            String     @id @unique @default(cuid())
//   timeline_type String
//   days          String
//   for           String
//   Campaign      Campaign[]
// }
model CampaignTimeline {
  id            String                  @id @unique @default(cuid())
  timeline_type String
  duration      String
  startDate     DateTime
  endDate       DateTime
  status        CampaignTimelineStatus?
  Campaign      Campaign[]
}

enum CampaignTimelineStatus {
  close
  active
}

model TimelineType {
  id           String                   @id @unique @default(cuid())
  name         String
  for          String
  dependencies TimelineTypeDependency[] @relation("TimelineDependencies")
  dependsOn    TimelineTypeDependency[] @relation("DependsOnTimeline")
}

model TimelineTypeDependency {
  id                  String        @id @unique @default(cuid())
  timeline_id         String
  dependsOnTimelineId String
  timeline            TimelineType? @relation("TimelineDependencies", fields: [timeline_id], references: [id])
  dependsOnTimeline   TimelineType? @relation("DependsOnTimeline", fields: [dependsOnTimelineId], references: [id])
}

model Pitch {
  id         String       @id @unique @default(cuid())
  type       PitchType
  campaignId String
  campaign   Campaign     @relation(fields: [campaignId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  status     PitchStatus?
  content    String       @default("test")
  createdAt  DateTime     @default(now())
  // FilterPitch FilterPitch[]
}

enum PitchType {
  video
  text
}

enum PitchStatus {
  accept
  reject
  filtered
}

model ShortListedCreator {
  id               String   @id @unique @default(cuid())
  shortlisted_date DateTime @default(now())
  creatorId        String
  creator          User     @relation(fields: [creatorId], references: [id])
  campaign         Campaign @relation(fields: [campaignId], references: [id])
  campaignId       String

  @@index([creatorId])
}

// model FilterPitch {
//   id            String   @id @unique @default(cuid())
//   filtered_date DateTime @default(now())
//   creatorId     String
//   creator       User     @relation(fields: [creatorId], references: [id])
//   campaign      Campaign @relation(fields: [campaignId], references: [id])
//   campaignId    String
//   pitchId       String
//   pitch         Pitch    @relation(fields: [pitchId], references: [id])
// }
